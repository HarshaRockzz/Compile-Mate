# Generated by Django 4.2.7 on 2025-06-25 09:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=10)),
                ('constraints', models.TextField(help_text='Input/output constraints')),
                ('examples', models.JSONField(default=list, help_text='List of example inputs/outputs')),
                ('starter_code', models.JSONField(default=dict, help_text='Starter code for different languages')),
                ('total_submissions', models.IntegerField(default=0)),
                ('accepted_submissions', models.IntegerField(default=0)),
                ('acceptance_rate', models.FloatField(default=0.0)),
                ('average_time', models.FloatField(default=0.0, help_text='Average execution time in seconds')),
                ('average_memory', models.FloatField(default=0.0, help_text='Average memory usage in MB')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coin_reward', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('xp_reward', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProblemDiscussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_solution', models.BooleanField(default=False, help_text='Mark as official solution')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#3B82F6', max_length=7)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_data', models.TextField()),
                ('expected_output', models.TextField()),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden test cases are not shown to users')),
                ('time_limit', models.FloatField(default=1.0, help_text='Time limit in seconds')),
                ('memory_limit', models.IntegerField(default=128, help_text='Memory limit in MB')),
                ('order', models.IntegerField(default=0, help_text='Order of test case')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='problems.problem')),
            ],
            options={
                'ordering': ['problem', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField()),
                ('language', models.CharField(choices=[('python', 'Python'), ('cpp', 'C++'), ('java', 'Java'), ('javascript', 'JavaScript')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('accepted', 'Accepted'), ('wrong_answer', 'Wrong Answer'), ('time_limit_exceeded', 'Time Limit Exceeded'), ('memory_limit_exceeded', 'Memory Limit Exceeded'), ('runtime_error', 'Runtime Error'), ('compilation_error', 'Compilation Error'), ('internal_error', 'Internal Error')], default='pending', max_length=25)),
                ('execution_time', models.FloatField(blank=True, help_text='Execution time in seconds', null=True)),
                ('memory_used', models.FloatField(blank=True, help_text='Memory used in MB', null=True)),
                ('test_cases_passed', models.IntegerField(default=0)),
                ('total_test_cases', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('judged_at', models.DateTimeField(blank=True, null=True)),
                ('failed_test_case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='problems.testcase')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='problems.problem')),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
    ]
